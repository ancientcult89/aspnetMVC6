@page "/forms/edit/{id:long}"
@page "/forms/create"

<link href="/blazorValidation.css" rel="stylesheet" />
<h4 class="bg-@Theme text-center text-white p-2">@Mode</h4>
<h6 class="bg-info text-center text-white p-2">@FormSubmitMessage</h6>

<FormSpy PersonData="PersonData">
    <EditForm Model="PersonData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator/>
        <DeptStateValidator DepartmentId="2" State="CA"/>
        @if (Mode == "Edit")
        {
            <div class="form-group">
                <label>ID</label>
                <InputNumber class="form-control" @bind-Value="PersonData.PersonId" readonly></InputNumber>
            </div>            
        }
        <div class="form-group">
            <label>Firstname</label>
            <ValidationMessage For="@(() => PersonData.Firstname)"/>
            <InputText class="form-control" @bind-Value="PersonData.Firstname"></InputText>
        </div>
        <div class="form-group">
            <label>Surname</label>
            <ValidationMessage For="@(() => PersonData.Surname)"/>
            <InputText class="form-control" @bind-Value="PersonData.Surname"></InputText>
        </div>
        <div class="form-group">
            <label>Deptartment</label>
            <ValidationMessage For="@(() => PersonData.DepartmentId)"/>
            <CustomSelect TValue="long" Values="Departments" 
                Parser="@((string str) => long.Parse(str))"
                @bind="PersonData.DepartmentId">
                    <option selected disabled value="0">
                        Choose a Department
                    </option>
            </CustomSelect>
        </div>
        <div class="form-group">
            <label>Location</label>
            <ValidationMessage For="@(() => PersonData.LocationId)"/>
            <CustomSelect TValue="long" Values="Locations" 
                Parser="@((string str) => long.Parse(str))"
                @bind="PersonData.LocationId">
                    <option selected disabled value="0">
                        Choose a Location
                    </option>
            </CustomSelect>
        </div>
        <div class="text-center">
            <ValidButton type="submit" BtnTheme="@Theme">Save</ValidButton>
            <NavLink class="btn btn-secondary mt-2" href="/forms">Back</NavLink>
        </div>
    </EditForm>

</FormSpy>

@code {
    [Inject]
    public NavigationManager? NavManager { get; set; }

    [Inject]
    HttpClient? Http { get; set; }

    [Parameter]
    public long Id { get; set; }

    public Person PersonData { get; set; } = new();

    public IDictionary<string, long> Departments { get; set; } = new Dictionary<string, long>();
    public IDictionary<string, long> Locations { get; set; } = new Dictionary<string, long>();

    protected async override Task OnParametersSetAsync()
    {
        if (Http != null)
        {
            if(Mode == "Edit")
                PersonData = await Http.GetFromJsonAsync<Person>($"/api/people/{Id}") ?? new Person();

            var depts = await Http.GetFromJsonAsync<Department[]>("/api/departments");
            Departments = (depts ?? Array.Empty<Department>()).ToDictionary(d => d.Name, d => d.DepartmentId);

            var locs = await Http.GetFromJsonAsync<Location[]>("/api/locations");
            Locations = (locs ?? Array.Empty<Location>()).ToDictionary(d => $"{d.City}, {d.State}", d => d.LocationId);
        }
    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";

    public string Theme => Id == 0 ? "primary" : "warning";
    public string Mode => Id == 0 ? "Create" : "Edit";

    public async Task HandleValidSubmit() {
        if (Http != null) {
            if (Mode == "Create") {
                await Http.PostAsJsonAsync("/api/people", PersonData);
            }
            else
                await Http.PutAsJsonAsync("/api/people", PersonData);
            NavManager?.NavigateTo("/forms");
        }
    }
}
